// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`examples functional.tsx 1`] = `
"// literal
export const Example = Object.assign(props => {
  return <div>
      {props.counter.toFixed()}
      {props.color?.trim()}
    </div>;
}, {
  displayName: "Example",
  props: ["color", "counter"]
});
<Example counter={0} color={"red"} />;

// interface
export interface Example1Props {
  color?: "red" | "blue";
  counter: number;
}
export const Example1 = Object.assign(props => {
  return <div>
      {props.counter.toFixed()}
      {props.color?.trim()}
    </div>;
}, {
  displayName: "Example1",
  props: ["color", "counter"]
});
<Example1 counter={0} color={"red"} />;

// type
export type Example2Props = {
  color?: "red" | "blue";
  counter: number;
};
export const Example2 = Object.assign(props => {
  return <div>
      {props.counter.toFixed()}
      {props.color?.trim()}
    </div>;
}, {
  displayName: "Example2",
  props: ["color", "counter"]
});
<Example2 counter={0} color={"red"} />;

// explicit
export const Example3 = Object.assign(props => {
  return <div>{props.color?.trim()}</div>;
}, {
  displayName: "Example3",
  props: {
    color: String
  }
});
<Example3 />;
export default Object.assign(function DefaultExample() {
  return <div />;
}, {
  displayName: "DefaultExample"
});"
`;

exports[`examples functional-defaults.tsx 1`] = `
"// reference
export interface ExampleProps {
  counter: number;
  color?: "red" | "blue";
  array?: string[];
}
export const exampleDefaults = {
  color: "red",
  array: () => []
};
export const Example = Object.assign(props => {
  return <div>
        {props.counter.toFixed()}
        {props.color.trim()}
        {props.array.slice()}
      </div>;
}, {
  displayName: "Example",
  props: {
    "counter": {
      type: null,
      default: exampleDefaults["counter"]
    },
    "color": {
      type: null,
      default: exampleDefaults["color"]
    },
    "array": {
      type: null,
      default: exampleDefaults["array"]
    }
  }
});
<Example counter={0} color={"red"} />;

// literal
const _temp = {
  color: "red",
  array: () => []
};
export const Example1 = Object.assign(props => {
  return <div>
        {props.counter.toFixed()}
        {props.color.trim()}
        {props.array.slice()}
      </div>;
}, {
  displayName: "Example1",
  props: {
    "color": {
      type: null,
      default: _temp["color"]
    },
    "counter": {
      type: null,
      default: _temp["counter"]
    },
    "array": {
      type: null,
      default: _temp["array"]
    }
  }
});
<Example1 counter={0} color={"red"} />;"
`;

exports[`examples functional-emits.tsx 1`] = `
"export type ExampleProps = {
  color?: "red" | "blue";
  counter: number;
};
export type ExampleEmits = {
  change: (value: number) => void;
  update: (value: string) => void;
};
export const Example = Object.assign((props, {
  emit
}) => {
  return <button data-color={props.color?.trim()} onClick={() => {
    emit("change", 0);
    emit("update", "");
  }}>
        {props.counter.toFixed()}
      </button>;
}, {
  displayName: "Example",
  props: ["color", "counter"]
});
<Example counter={0} onChange={value => value.toFixed()} />;"
`;

exports[`examples standard.tsx 1`] = `
"import { onMounted } from "vue";
// literal
export const Example = {
  name: "Example",
  props: ["color", "counter"],
  setup: props => {
    onMounted(() => {
      console.log("mounted");
    });
    return () => <div>
      {props.counter.toFixed()}
      {props.color?.trim()}
    </div>;
  }
};
<Example counter={0} color={"red"} />;

// interface
export interface Example1Props {
  color?: "red" | "blue";
  counter: number;
}
export const Example1 = {
  name: "Example1",
  props: ["color", "counter"],
  setup: props => {
    onMounted(() => {
      console.log("mounted");
    });
    return () => <div>
      {props.counter.toFixed()}
      {props.color?.trim()}
    </div>;
  }
};

// type
export type Example2Props = {
  color?: "red" | "blue";
  counter: number;
  array?: string[];
};
export const Example2 = {
  name: "Example2",
  props: ["color", "counter", "array"],
  setup: props => {
    onMounted(() => {
      console.log("mounted");
    });
    return () => <div>
      {props.counter.toFixed()}
      {props.color?.trim()}
    </div>;
  }
};

// ComponentPropsOptions
export const Example3 = {
  name: "Example3",
  props: {
    color: String
  },
  setup: props => {
    onMounted(() => {
      console.log("mounted");
    });
    return () => <div>{props.color?.trim()}</div>;
  }
};

// name from function
export default {
  name: "DefaultExample",
  setup: function DefaultExample() {
    onMounted(() => {
      console.log("mounted");
    });
    return () => <div />;
  }
};"
`;

exports[`examples standard-defaults.tsx 1`] = `
"// reference
export interface ExampleProps {
  counter: number;
  color?: "red" | "blue";
  array?: string[];
}
export const exampleDefaults = {
  color: "red",
  array: () => []
};
export const Example = {
  name: "Example",
  props: {
    "counter": {
      type: null,
      default: exampleDefaults["counter"]
    },
    "color": {
      type: null,
      default: exampleDefaults["color"]
    },
    "array": {
      type: null,
      default: exampleDefaults["array"]
    }
  },
  setup: props => {
    return () => <div>
        {props.counter.toFixed()}
        {props.color.trim()}
        {props.array.slice()}
      </div>;
  }
};
<Example counter={0} color={"red"} />;

// literal
const _temp = {
  color: "red",
  array: () => []
};
export const Example1 = {
  name: "Example1",
  props: {
    "color": {
      type: null,
      default: _temp["color"]
    },
    "counter": {
      type: null,
      default: _temp["counter"]
    },
    "array": {
      type: null,
      default: _temp["array"]
    }
  },
  setup: props => {
    return () => <div>
        {props.counter.toFixed()}
        {props.color.trim()}
        {props.array.slice()}
      </div>;
  }
};
<Example1 counter={0} color={"red"} />;"
`;

exports[`examples standard-emits.tsx 1`] = `
"export type ExampleProps = {
  color?: "red" | "blue";
  counter: number;
};
export type ExampleEmits = {
  change: (value: number) => void;
  update: (value: string) => void;
};
export const Example = {
  name: "Example",
  props: ["color", "counter"],
  emits: ["change", "update"],
  setup: (props, {
    emit
  }) => {
    return () => <button data-color={props.color?.trim()} onClick={() => {
      emit("change", 0);
      emit("update", "");
    }}>
        {props.counter.toFixed()}
      </button>;
  }
};
<Example counter={0} onChange={value => value.toFixed()} />;"
`;

exports[`examples standard-expose.tsx 1`] = `
"import { ref } from "vue";
export interface ExampleProps {
  counter: number;
  array?: string[];
}
export const Example1 = {
  name: "Example1",
  props: ["counter", "array"],
  setup: (props, {
    expose
  }) => {
    const list = ref(props.array);
    return expose({
      list
    }), Object.assign(() => <div>{props.counter.toFixed()}</div>, {
      list
    });
  }
};
const instance1 = ((null as unknown) as InstanceType<typeof Example1>);
console.log(instance1.list?.[0]?.trim());"
`;
