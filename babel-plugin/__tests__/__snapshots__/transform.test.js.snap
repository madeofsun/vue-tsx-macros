// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transform functional.tsx 1`] = `
"export interface ExampleProps {
  color?: "red" | "blue";
  counter: number;
  array?: string[];
}
export const Example = Object.assign(props => {
  const color: string | undefined = props.color;
  const counter: number = props.counter;
  return <div>
      {counter}
      {color}
    </div>;
}, {
  displayName: "Example",
  props: ["color", "counter", "array"]
});"
`;

exports[`transform functional-defaults.tsx 1`] = `
"export interface ExampleProps {
  color?: "red" | "blue";
  counter: number;
  array?: string[];
}
const _temp = {
  color: "red"
};
export const Example = Object.assign(props => {
  const color: string = props.color;
  const counter: number = props.counter;
  return <div>
        {counter}
        {color}
      </div>;
}, {
  displayName: "Example",
  props: {
    "color": {
      type: null,
      default: _temp["color"]
    },
    "counter": {
      type: null,
      default: _temp["counter"]
    },
    "array": {
      type: null,
      default: _temp["array"]
    }
  }
});"
`;

exports[`transform standard.tsx 1`] = `
"export interface ExampleProps {
  color?: "red" | "blue";
  counter: number;
  array?: string[];
}
export default {
  name: "DefaultExample",
  setup: function DefaultExample() {
    return <div></div>;
  }
};
export const Example = {
  name: "Example",
  props: ["color", "counter", "array"],
  setup: props => {
    return () => {
      const color: string | undefined = props.color;
      const counter: number = props.counter;
      return <div>
        {counter}
        {color}
      </div>;
    };
  }
};
export const Example1 = {
  name: "Example1",
  props: ["color", "counter", "array"],
  setup: props => {
    return () => {
      const color: string | undefined = props.color;
      const counter: number = props.counter;
      return <div>
        {counter}
        {color}
      </div>;
    };
  }
};
export type Example2Props = {
  color?: "red" | "blue";
  counter: number;
  array?: string[];
};
export const Example2 = {
  name: "Example2",
  props: ["color", "counter", "array"],
  setup: props => {
    return () => {
      const color: string | undefined = props.color;
      const counter: number = props.counter;
      return <div>
        {counter}
        {color}
      </div>;
    };
  }
};
export const Example3 = {
  name: "Example3",
  props: {
    color: {
      type: String
    }
  },
  setup: props => {
    return () => {
      const color: string | undefined = props.color;
      return <div>{color}</div>;
    };
  }
};"
`;

exports[`transform standard-defaults.tsx 1`] = `
"export interface ExampleProps {
  color?: "red" | "blue";
  counter: number;
  array?: string[];
}
export const defaults = {
  color: "red",
  boolean: false,
  array: () => []
};
export const Example = {
  name: "Example",
  props: {
    "color": {
      type: null,
      default: defaults["color"]
    },
    "counter": {
      type: null,
      default: defaults["counter"]
    },
    "array": {
      type: null,
      default: defaults["array"]
    }
  },
  setup: props => {
    return () => {
      const color: "red" | "blue" = props.color;
      return <div>{color}</div>;
    };
  }
};
const _temp = {
  color: "red"
};
export const Example2 = {
  name: "Example2",
  props: {
    "color": {
      type: null,
      default: _temp["color"]
    },
    "counter": {
      type: null,
      default: _temp["counter"]
    },
    "array": {
      type: null,
      default: _temp["array"]
    }
  },
  setup: props => {
    return () => {
      const color: "red" | "blue" = props.color;
      return <div>{color}</div>;
    };
  }
};"
`;

exports[`transform standard-expose.tsx 1`] = `
"import { ref } from "vue";
export interface ExampleProps {
  color?: "red" | "blue";
  counter: number;
  array?: string[];
}
export const Example1 = {
  name: "Example1",
  props: ["color", "counter", "array"],
  setup: (props, {
    expose
  }) => {
    const list = ref(props.array);
    return expose({
      list
    }), () => <div>{props.counter}</div>;
  }
};
const instance = ((null as unknown) as InstanceType<typeof Example1>);
console.log(instance.list?.[0]?.trim());
export const Example2 = {
  name: "Example2",
  props: ["color", "counter", "array"],
  setup: (props, {
    expose
  }) => {
    const list = ref(props.array);
    return expose({
      list
    }), () => <div>{props.counter}</div>;
  }
};
export const Example3 = {
  name: "Example3",
  props: ["color", "counter", "array"],
  setup: (props, {
    expose
  }) => {
    const list = ref(props.array);
    return expose({
      list
    });
  }
};
export const Example4 = {
  name: "Example4",
  props: ["color", "counter", "array"],
  setup: (props, context) => {
    const list = ref(props.array);
    return context.expose({
      list
    });
  }
};"
`;
